type List[A] {
  Cons(A, List[A]),
  Nil,
}

type Option[A] {
  Some(A),
  None,
}

type Tree[A] {
  Rose(A, List[Tree[A]]),
}

type tensor_float16_t {
  tensor_nil_float16,
  tensor0_float16(float16),
  tensor1_float16(Tensor[(?), float16]),
  tensor2_float16(Tensor[(?, ?), float16]),
  tensor3_float16(Tensor[(?, ?, ?), float16]),
  tensor4_float16(Tensor[(?, ?, ?, ?), float16]),
  tensor5_float16(Tensor[(?, ?, ?, ?, ?), float16]),
  tensor6_float16(Tensor[(?, ?, ?, ?, ?, ?), float16]),
}

type tensor_float32_t {
  tensor_nil_float32,
  tensor0_float32(float32),
  tensor1_float32(Tensor[(?), float32]),
  tensor2_float32(Tensor[(?, ?), float32]),
  tensor3_float32(Tensor[(?, ?, ?), float32]),
  tensor4_float32(Tensor[(?, ?, ?, ?), float32]),
  tensor5_float32(Tensor[(?, ?, ?, ?, ?), float32]),
  tensor6_float32(Tensor[(?, ?, ?, ?, ?, ?), float32]),
}

type tensor_float64_t {
  tensor_nil_float64,
  tensor0_float64(float64),
  tensor1_float64(Tensor[(?), float64]),
  tensor2_float64(Tensor[(?, ?), float64]),
  tensor3_float64(Tensor[(?, ?, ?), float64]),
  tensor4_float64(Tensor[(?, ?, ?, ?), float64]),
  tensor5_float64(Tensor[(?, ?, ?, ?, ?), float64]),
  tensor6_float64(Tensor[(?, ?, ?, ?, ?, ?), float64]),
}

type tensor_int16_t {
  tensor_nil_int16,
  tensor0_int16(int16),
  tensor1_int16(Tensor[(?), int16]),
  tensor2_int16(Tensor[(?, ?), int16]),
  tensor3_int16(Tensor[(?, ?, ?), int16]),
  tensor4_int16(Tensor[(?, ?, ?, ?), int16]),
  tensor5_int16(Tensor[(?, ?, ?, ?, ?), int16]),
  tensor6_int16(Tensor[(?, ?, ?, ?, ?, ?), int16]),
}

type tensor_int32_t {
  tensor_nil_int32,
  tensor0_int32(int32),
  tensor1_int32(Tensor[(?), int32]),
  tensor2_int32(Tensor[(?, ?), int32]),
  tensor3_int32(Tensor[(?, ?, ?), int32]),
  tensor4_int32(Tensor[(?, ?, ?, ?), int32]),
  tensor5_int32(Tensor[(?, ?, ?, ?, ?), int32]),
  tensor6_int32(Tensor[(?, ?, ?, ?, ?, ?), int32]),
}

type tensor_int64_t {
  tensor_nil_int64,
  tensor0_int64(int64),
  tensor1_int64(Tensor[(?), int64]),
  tensor2_int64(Tensor[(?, ?), int64]),
  tensor3_int64(Tensor[(?, ?, ?), int64]),
  tensor4_int64(Tensor[(?, ?, ?, ?), int64]),
  tensor5_int64(Tensor[(?, ?, ?, ?, ?), int64]),
  tensor6_int64(Tensor[(?, ?, ?, ?, ?, ?), int64]),
}

type tensor_int8_t {
  tensor_nil_int8,
  tensor0_int8(int8),
  tensor1_int8(Tensor[(?), int8]),
  tensor2_int8(Tensor[(?, ?), int8]),
  tensor3_int8(Tensor[(?, ?, ?), int8]),
  tensor4_int8(Tensor[(?, ?, ?, ?), int8]),
  tensor5_int8(Tensor[(?, ?, ?, ?, ?), int8]),
  tensor6_int8(Tensor[(?, ?, ?, ?, ?, ?), int8]),
}

type tensor_uint16_t {
  tensor_nil_uint16,
  tensor0_uint16(uint16),
  tensor1_uint16(Tensor[(?), uint16]),
  tensor2_uint16(Tensor[(?, ?), uint16]),
  tensor3_uint16(Tensor[(?, ?, ?), uint16]),
  tensor4_uint16(Tensor[(?, ?, ?, ?), uint16]),
  tensor5_uint16(Tensor[(?, ?, ?, ?, ?), uint16]),
  tensor6_uint16(Tensor[(?, ?, ?, ?, ?, ?), uint16]),
}

type tensor_uint8_t {
  tensor_nil_uint8,
  tensor0_uint8(uint8),
  tensor1_uint8(Tensor[(?), uint8]),
  tensor2_uint8(Tensor[(?, ?), uint8]),
  tensor3_uint8(Tensor[(?, ?, ?), uint8]),
  tensor4_uint8(Tensor[(?, ?, ?, ?), uint8]),
  tensor5_uint8(Tensor[(?, ?, ?, ?, ?), uint8]),
  tensor6_uint8(Tensor[(?, ?, ?, ?, ?, ?), uint8]),
}

def @main(%input0: Tensor[(1, 64, 28, 28), float32] /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::split_with_sizes_0.input0:0:0 */) -> Tensor[(1, 128, 28, 28), float32] {
  %0 = annotation.compiler_begin(%input0, compiler="imcflow_region1") /* ty=Tensor[(1, 64, 28, 28), float32] */;
  %1 = @tvmgen_default_imcflow_region2_main_0(%0) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %2 = @tvmgen_default_imcflow_region1_main_1(%1) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  annotation.compiler_end(%2, compiler="imcflow_region1") /* ty=Tensor[(1, 128, 28, 28), float32] */
}

def @tvmgen_default_imcflow_region1_main_1(%imcflow_region1_1_i0: Tensor[(1, 128, 28, 28), float32] /* ty=Tensor[(1, 128, 28, 28), float32] */, Compiler="imcflow_region1", Primitive=1, Inline=1, global_symbol="tvmgen_default_imcflow_region1_main_1") -> Tensor[(1, 128, 28, 28), float32] {
  %12 = split(%imcflow_region1_1_i0, indices_or_sections=[meta[runtime.BoxInt][0], meta[runtime.BoxInt][1], meta[runtime.BoxInt][2], meta[runtime.BoxInt][3]], axis=1) /* ty=(Tensor[(1, 28, 28, 28), float32], Tensor[(1, 28, 28, 28), float32], Tensor[(1, 28, 28, 28), float32], Tensor[(1, 28, 28, 28), float32], Tensor[(1, 16, 28, 28), float32]) */;
  %14 = %12.1 /* ty=Tensor[(1, 28, 28, 28), float32] */;
  %15 = fn (%FunctionVar_3_0: Tensor[(1, 28, 28, 28), float32] /* ty=Tensor[(1, 28, 28, 28), float32] */, PartitionedFromPattern="nn.conv2d_nn.bias_add_", Composite="imcflow.conv2d-bias_add") -> Tensor[(1, 64, 28, 28), float32] {
    %13 = nn.conv2d(%FunctionVar_3_0, meta[relay.Constant][6] /* ty=Tensor[(64, 28, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_7:0:0 */;
    nn.bias_add(%13, meta[relay.Constant][7] /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_7:0:0 */
  } /* ty=fn (Tensor[(1, 28, 28, 28), float32]) -> Tensor[(1, 64, 28, 28), float32] */;
  %20 = %12.3 /* ty=Tensor[(1, 28, 28, 28), float32] */;
  %21 = fn (%FunctionVar_2_0: Tensor[(1, 28, 28, 28), float32] /* ty=Tensor[(1, 28, 28, 28), float32] */, PartitionedFromPattern="nn.conv2d_nn.bias_add_", Composite="imcflow.conv2d-bias_add") -> Tensor[(1, 64, 28, 28), float32] {
    %19 = nn.conv2d(%FunctionVar_2_0, meta[relay.Constant][10] /* ty=Tensor[(64, 28, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_9:0:0 */;
    nn.bias_add(%19, meta[relay.Constant][11] /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_9:0:0 */
  } /* ty=fn (Tensor[(1, 28, 28, 28), float32]) -> Tensor[(1, 64, 28, 28), float32] */;
  %22 = %12.2 /* ty=Tensor[(1, 28, 28, 28), float32] */;
  %23 = %21(%20) /* ty=Tensor[(1, 64, 28, 28), float32] */;
  %24 = fn (%FunctionVar_1_01: Tensor[(1, 28, 28, 28), float32] /* ty=Tensor[(1, 28, 28, 28), float32] */, %FunctionVar_1_11: Tensor[(1, 64, 28, 28), float32] /* ty=Tensor[(1, 64, 28, 28), float32] */, PartitionedFromPattern="nn.conv2d_nn.bias_add_add_divide_", Composite="imcflow.conv2d-bias_add-add-div") -> Tensor[(1, 64, 28, 28), float32] {
    %16 = nn.conv2d(%FunctionVar_1_01, meta[relay.Constant][8] /* ty=Tensor[(64, 28, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_8:0:0 */;
    %17 = nn.bias_add(%16, meta[relay.Constant][9] /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_8:0:0 */;
    %18 = add(%17, %FunctionVar_1_11) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::add_5:0:0 */;
    divide(%18, 2f /* ty=float32 span=aten::div_5:0:0 */) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::div_5:0:0 */
  } /* ty=fn (Tensor[(1, 28, 28, 28), float32], Tensor[(1, 64, 28, 28), float32]) -> Tensor[(1, 64, 28, 28), float32] */;
  %27 = %12.4 /* ty=Tensor[(1, 16, 28, 28), float32] */;
  %28 = fn (%FunctionVar_1_02: Tensor[(1, 16, 28, 28), float32] /* ty=Tensor[(1, 16, 28, 28), float32] */, PartitionedFromPattern="nn.conv2d_nn.bias_add_divide_", Composite="imcflow.conv2d-bias_add-div") -> Tensor[(1, 64, 28, 28), float32] {
    %25 = nn.conv2d(%FunctionVar_1_02, meta[relay.Constant][12] /* ty=Tensor[(64, 16, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_10:0:0 */;
    %26 = nn.bias_add(%25, meta[relay.Constant][13] /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_10:0:0 */;
    divide(%26, 2f /* ty=float32 span=aten::div_6:0:0 */) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::div_6:0:0 */
  } /* ty=fn (Tensor[(1, 16, 28, 28), float32]) -> Tensor[(1, 64, 28, 28), float32] */;
  %29 = %12.0 /* ty=Tensor[(1, 28, 28, 28), float32] */;
  %30 = %15(%14) /* ty=Tensor[(1, 64, 28, 28), float32] */;
  %31 = %24(%22, %23) /* ty=Tensor[(1, 64, 28, 28), float32] */;
  %32 = %28(%27) /* ty=Tensor[(1, 64, 28, 28), float32] */;
  %33 = fn (%FunctionVar_1_0: Tensor[(1, 28, 28, 28), float32] /* ty=Tensor[(1, 28, 28, 28), float32] */, %FunctionVar_1_1: Tensor[(1, 64, 28, 28), float32] /* ty=Tensor[(1, 64, 28, 28), float32] */, %FunctionVar_1_2: Tensor[(1, 64, 28, 28), float32] /* ty=Tensor[(1, 64, 28, 28), float32] */, %FunctionVar_1_3: Tensor[(1, 64, 28, 28), float32] /* ty=Tensor[(1, 64, 28, 28), float32] */, PartitionedFromPattern="nn.conv2d_nn.bias_add_add_divide_add_add_nn.batch_norm_TupleGetItem0_nn.relu_qnn.imcflow_min_max_quantize_", Composite="imcflow.conv2d-bias_add-add-div-add-bn-relu-min_max_quant") -> Tensor[(1, 64, 28, 28), float32] {
    %3 = nn.conv2d(%FunctionVar_1_0, meta[relay.Constant][0] /* ty=Tensor[(64, 28, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_6:0:0 */;
    %4 = nn.bias_add(%3, meta[relay.Constant][1] /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_6:0:0 */;
    %5 = add(%4, %FunctionVar_1_1) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::add_4:0:0 */;
    %6 = divide(%5, 2f /* ty=float32 span=aten::div_4:0:0 */) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::div_4:0:0 */;
    %7 = add(%6, %FunctionVar_1_2) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::add_6:0:0 */;
    %8 = add(%7, %FunctionVar_1_3) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::add_7:0:0 */;
    %9 = nn.batch_norm(%8, meta[relay.Constant][2] /* ty=Tensor[(64), float32] */, meta[relay.Constant][3] /* ty=Tensor[(64), float32] */, meta[relay.Constant][4] /* ty=Tensor[(64), float32] */, meta[relay.Constant][5] /* ty=Tensor[(64), float32] */) /* ty=(Tensor[(1, 64, 28, 28), float32], Tensor[(64), float32], Tensor[(64), float32]) span=aten::batch_norm_2:0:0 */;
    %10 = %9.0 /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::batch_norm_2:0:0 */;
    %11 = nn.relu(%10) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::relu_2:0:0 */;
    qnn.imcflow_min_max_quantize(%11, 0f /* ty=float32 span=imcflow::min_max_quant_2:0:0 */, 1f /* ty=float32 span=imcflow::min_max_quant_2:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 64, 28, 28), float32] span=imcflow::min_max_quant_2:0:0 */
  } /* ty=fn (Tensor[(1, 28, 28, 28), float32], Tensor[(1, 64, 28, 28), float32], Tensor[(1, 64, 28, 28), float32], Tensor[(1, 64, 28, 28), float32]) -> Tensor[(1, 64, 28, 28), float32] */;
  %44 = fn (%FunctionVar_1_03: Tensor[(1, 28, 28, 28), float32] /* ty=Tensor[(1, 28, 28, 28), float32] */, PartitionedFromPattern="nn.conv2d_nn.bias_add_", Composite="imcflow.conv2d-bias_add") -> Tensor[(1, 64, 28, 28), float32] {
    %43 = nn.conv2d(%FunctionVar_1_03, meta[relay.Constant][20] /* ty=Tensor[(64, 28, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_12:0:0 */;
    nn.bias_add(%43, meta[relay.Constant][21] /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_12:0:0 */
  } /* ty=fn (Tensor[(1, 28, 28, 28), float32]) -> Tensor[(1, 64, 28, 28), float32] */;
  %49 = fn (%FunctionVar_0_02: Tensor[(1, 28, 28, 28), float32] /* ty=Tensor[(1, 28, 28, 28), float32] */, PartitionedFromPattern="nn.conv2d_nn.bias_add_", Composite="imcflow.conv2d-bias_add") -> Tensor[(1, 64, 28, 28), float32] {
    %48 = nn.conv2d(%FunctionVar_0_02, meta[relay.Constant][24] /* ty=Tensor[(64, 28, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_14:0:0 */;
    nn.bias_add(%48, meta[relay.Constant][25] /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_14:0:0 */
  } /* ty=fn (Tensor[(1, 28, 28, 28), float32]) -> Tensor[(1, 64, 28, 28), float32] */;
  %50 = %49(%20) /* ty=Tensor[(1, 64, 28, 28), float32] */;
  %51 = fn (%FunctionVar_0_01: Tensor[(1, 28, 28, 28), float32] /* ty=Tensor[(1, 28, 28, 28), float32] */, %FunctionVar_0_11: Tensor[(1, 64, 28, 28), float32] /* ty=Tensor[(1, 64, 28, 28), float32] */, PartitionedFromPattern="nn.conv2d_nn.bias_add_add_divide_", Composite="imcflow.conv2d-bias_add-add-div") -> Tensor[(1, 64, 28, 28), float32] {
    %45 = nn.conv2d(%FunctionVar_0_01, meta[relay.Constant][22] /* ty=Tensor[(64, 28, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_13:0:0 */;
    %46 = nn.bias_add(%45, meta[relay.Constant][23] /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_13:0:0 */;
    %47 = add(%46, %FunctionVar_0_11) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::add_9:0:0 */;
    divide(%47, 2f /* ty=float32 span=aten::div_8:0:0 */) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::div_8:0:0 */
  } /* ty=fn (Tensor[(1, 28, 28, 28), float32], Tensor[(1, 64, 28, 28), float32]) -> Tensor[(1, 64, 28, 28), float32] */;
  %54 = fn (%FunctionVar_0_03: Tensor[(1, 16, 28, 28), float32] /* ty=Tensor[(1, 16, 28, 28), float32] */, PartitionedFromPattern="nn.conv2d_nn.bias_add_divide_", Composite="imcflow.conv2d-bias_add-div") -> Tensor[(1, 64, 28, 28), float32] {
    %52 = nn.conv2d(%FunctionVar_0_03, meta[relay.Constant][26] /* ty=Tensor[(64, 16, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_15:0:0 */;
    %53 = nn.bias_add(%52, meta[relay.Constant][27] /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_15:0:0 */;
    divide(%53, 2f /* ty=float32 span=aten::div_9:0:0 */) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::div_9:0:0 */
  } /* ty=fn (Tensor[(1, 16, 28, 28), float32]) -> Tensor[(1, 64, 28, 28), float32] */;
  %55 = %44(%14) /* ty=Tensor[(1, 64, 28, 28), float32] */;
  %56 = %51(%22, %50) /* ty=Tensor[(1, 64, 28, 28), float32] */;
  %57 = %54(%27) /* ty=Tensor[(1, 64, 28, 28), float32] */;
  %58 = fn (%FunctionVar_0_0: Tensor[(1, 28, 28, 28), float32] /* ty=Tensor[(1, 28, 28, 28), float32] */, %FunctionVar_0_1: Tensor[(1, 64, 28, 28), float32] /* ty=Tensor[(1, 64, 28, 28), float32] */, %FunctionVar_0_2: Tensor[(1, 64, 28, 28), float32] /* ty=Tensor[(1, 64, 28, 28), float32] */, %FunctionVar_0_3: Tensor[(1, 64, 28, 28), float32] /* ty=Tensor[(1, 64, 28, 28), float32] */, PartitionedFromPattern="nn.conv2d_nn.bias_add_add_divide_add_add_nn.batch_norm_TupleGetItem0_nn.relu_qnn.imcflow_min_max_quantize_", Composite="imcflow.conv2d-bias_add-add-div-add-bn-relu-min_max_quant") -> Tensor[(1, 64, 28, 28), float32] {
    %34 = nn.conv2d(%FunctionVar_0_0, meta[relay.Constant][14] /* ty=Tensor[(64, 28, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_11:0:0 */;
    %35 = nn.bias_add(%34, meta[relay.Constant][15] /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_11:0:0 */;
    %36 = add(%35, %FunctionVar_0_1) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::add_8:0:0 */;
    %37 = divide(%36, 2f /* ty=float32 span=aten::div_7:0:0 */) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::div_7:0:0 */;
    %38 = add(%37, %FunctionVar_0_2) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::add_10:0:0 */;
    %39 = add(%38, %FunctionVar_0_3) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::add_11:0:0 */;
    %40 = nn.batch_norm(%39, meta[relay.Constant][16] /* ty=Tensor[(64), float32] */, meta[relay.Constant][17] /* ty=Tensor[(64), float32] */, meta[relay.Constant][18] /* ty=Tensor[(64), float32] */, meta[relay.Constant][19] /* ty=Tensor[(64), float32] */) /* ty=(Tensor[(1, 64, 28, 28), float32], Tensor[(64), float32], Tensor[(64), float32]) span=aten::batch_norm_3:0:0 */;
    %41 = %40.0 /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::batch_norm_3:0:0 */;
    %42 = nn.relu(%41) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::relu_3:0:0 */;
    qnn.imcflow_min_max_quantize(%42, 0f /* ty=float32 span=imcflow::min_max_quant_3:0:0 */, 1f /* ty=float32 span=imcflow::min_max_quant_3:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 64, 28, 28), float32] span=imcflow::min_max_quant_3:0:0 */
  } /* ty=fn (Tensor[(1, 28, 28, 28), float32], Tensor[(1, 64, 28, 28), float32], Tensor[(1, 64, 28, 28), float32], Tensor[(1, 64, 28, 28), float32]) -> Tensor[(1, 64, 28, 28), float32] */;
  %59 = %33(%29, %30, %31, %32) /* ty=Tensor[(1, 64, 28, 28), float32] */;
  %60 = %58(%29, %55, %56, %57) /* ty=Tensor[(1, 64, 28, 28), float32] */;
  %61 = (%59, %60) /* ty=(Tensor[(1, 64, 28, 28), float32], Tensor[(1, 64, 28, 28), float32]) */;
  concatenate(%61, axis=1) /* ty=Tensor[(1, 128, 28, 28), float32] */
}

def @tvmgen_default_imcflow_region2_main_0(%imcflow_region2_0_i0: Tensor[(1, 64, 28, 28), float32] /* ty=Tensor[(1, 64, 28, 28), float32] */, Compiler="imcflow_region2", Primitive=1, Inline=1, global_symbol="tvmgen_default_imcflow_region2_main_0") -> Tensor[(1, 128, 28, 28), float32] {
  %70 = split(%imcflow_region2_0_i0, indices_or_sections=[meta[runtime.BoxInt][4], meta[runtime.BoxInt][5]], axis=1) /* ty=(Tensor[(1, 28, 28, 28), float32], Tensor[(1, 28, 28, 28), float32], Tensor[(1, 8, 28, 28), float32]) */;
  %72 = %70.1 /* ty=Tensor[(1, 28, 28, 28), float32] */;
  %73 = fn (%FunctionVar_5_0: Tensor[(1, 28, 28, 28), float32] /* ty=Tensor[(1, 28, 28, 28), float32] */, PartitionedFromPattern="nn.conv2d_nn.bias_add_", Composite="imcflow.conv2d-bias_add") -> Tensor[(1, 64, 28, 28), float32] {
    %71 = nn.conv2d(%FunctionVar_5_0, meta[relay.Constant][34] /* ty=Tensor[(64, 28, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_1:0:0 */;
    nn.bias_add(%71, meta[relay.Constant][35] /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_1:0:0 */
  } /* ty=fn (Tensor[(1, 28, 28, 28), float32]) -> Tensor[(1, 64, 28, 28), float32] */;
  %76 = %70.2 /* ty=Tensor[(1, 8, 28, 28), float32] */;
  %77 = fn (%FunctionVar_3_02: Tensor[(1, 8, 28, 28), float32] /* ty=Tensor[(1, 8, 28, 28), float32] */, PartitionedFromPattern="nn.conv2d_nn.bias_add_divide_", Composite="imcflow.conv2d-bias_add-div") -> Tensor[(1, 64, 28, 28), float32] {
    %74 = nn.conv2d(%FunctionVar_3_02, meta[relay.Constant][36] /* ty=Tensor[(64, 8, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_2:0:0 */;
    %75 = nn.bias_add(%74, meta[relay.Constant][37] /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_2:0:0 */;
    divide(%75, 2f /* ty=float32 span=aten::div_1:0:0 */) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::div_1:0:0 */
  } /* ty=fn (Tensor[(1, 8, 28, 28), float32]) -> Tensor[(1, 64, 28, 28), float32] */;
  %78 = %70.0 /* ty=Tensor[(1, 28, 28, 28), float32] */;
  %79 = %73(%72) /* ty=Tensor[(1, 64, 28, 28), float32] */;
  %80 = %77(%76) /* ty=Tensor[(1, 64, 28, 28), float32] */;
  %81 = fn (%FunctionVar_3_01: Tensor[(1, 28, 28, 28), float32] /* ty=Tensor[(1, 28, 28, 28), float32] */, %FunctionVar_3_1: Tensor[(1, 64, 28, 28), float32] /* ty=Tensor[(1, 64, 28, 28), float32] */, %FunctionVar_3_2: Tensor[(1, 64, 28, 28), float32] /* ty=Tensor[(1, 64, 28, 28), float32] */, PartitionedFromPattern="nn.conv2d_nn.bias_add_add_divide_add_nn.batch_norm_TupleGetItem0_nn.relu_qnn.imcflow_min_max_quantize_", Composite="imcflow.conv2d-bias_add-add-div-add-bn-relu-min_max_quant") -> Tensor[(1, 64, 28, 28), float32] {
    %62 = nn.conv2d(%FunctionVar_3_01, meta[relay.Constant][28] /* ty=Tensor[(64, 28, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_0:0:0 */;
    %63 = nn.bias_add(%62, meta[relay.Constant][29] /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_0:0:0 */;
    %64 = add(%63, %FunctionVar_3_1) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::add_0:0:0 */;
    %65 = divide(%64, 2f /* ty=float32 span=aten::div_0:0:0 */) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::div_0:0:0 */;
    %66 = add(%65, %FunctionVar_3_2) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::add_1:0:0 */;
    %67 = nn.batch_norm(%66, meta[relay.Constant][30] /* ty=Tensor[(64), float32] */, meta[relay.Constant][31] /* ty=Tensor[(64), float32] */, meta[relay.Constant][32] /* ty=Tensor[(64), float32] */, meta[relay.Constant][33] /* ty=Tensor[(64), float32] */) /* ty=(Tensor[(1, 64, 28, 28), float32], Tensor[(64), float32], Tensor[(64), float32]) span=aten::batch_norm_0:0:0 */;
    %68 = %67.0 /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::batch_norm_0:0:0 */;
    %69 = nn.relu(%68) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::relu_0:0:0 */;
    qnn.imcflow_min_max_quantize(%69, 0f /* ty=float32 span=imcflow::min_max_quant_0:0:0 */, 1f /* ty=float32 span=imcflow::min_max_quant_0:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 64, 28, 28), float32] span=imcflow::min_max_quant_0:0:0 */
  } /* ty=fn (Tensor[(1, 28, 28, 28), float32], Tensor[(1, 64, 28, 28), float32], Tensor[(1, 64, 28, 28), float32]) -> Tensor[(1, 64, 28, 28), float32] */;
  %91 = fn (%FunctionVar_4_0: Tensor[(1, 28, 28, 28), float32] /* ty=Tensor[(1, 28, 28, 28), float32] */, PartitionedFromPattern="nn.conv2d_nn.bias_add_", Composite="imcflow.conv2d-bias_add") -> Tensor[(1, 64, 28, 28), float32] {
    %90 = nn.conv2d(%FunctionVar_4_0, meta[relay.Constant][44] /* ty=Tensor[(64, 28, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_4:0:0 */;
    nn.bias_add(%90, meta[relay.Constant][45] /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_4:0:0 */
  } /* ty=fn (Tensor[(1, 28, 28, 28), float32]) -> Tensor[(1, 64, 28, 28), float32] */;
  %94 = fn (%FunctionVar_2_02: Tensor[(1, 8, 28, 28), float32] /* ty=Tensor[(1, 8, 28, 28), float32] */, PartitionedFromPattern="nn.conv2d_nn.bias_add_divide_", Composite="imcflow.conv2d-bias_add-div") -> Tensor[(1, 64, 28, 28), float32] {
    %92 = nn.conv2d(%FunctionVar_2_02, meta[relay.Constant][46] /* ty=Tensor[(64, 8, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_5:0:0 */;
    %93 = nn.bias_add(%92, meta[relay.Constant][47] /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_5:0:0 */;
    divide(%93, 2f /* ty=float32 span=aten::div_3:0:0 */) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::div_3:0:0 */
  } /* ty=fn (Tensor[(1, 8, 28, 28), float32]) -> Tensor[(1, 64, 28, 28), float32] */;
  %95 = %91(%72) /* ty=Tensor[(1, 64, 28, 28), float32] */;
  %96 = %94(%76) /* ty=Tensor[(1, 64, 28, 28), float32] */;
  %97 = fn (%FunctionVar_2_01: Tensor[(1, 28, 28, 28), float32] /* ty=Tensor[(1, 28, 28, 28), float32] */, %FunctionVar_2_1: Tensor[(1, 64, 28, 28), float32] /* ty=Tensor[(1, 64, 28, 28), float32] */, %FunctionVar_2_2: Tensor[(1, 64, 28, 28), float32] /* ty=Tensor[(1, 64, 28, 28), float32] */, PartitionedFromPattern="nn.conv2d_nn.bias_add_add_divide_add_nn.batch_norm_TupleGetItem0_nn.relu_qnn.imcflow_min_max_quantize_", Composite="imcflow.conv2d-bias_add-add-div-add-bn-relu-min_max_quant") -> Tensor[(1, 64, 28, 28), float32] {
    %82 = nn.conv2d(%FunctionVar_2_01, meta[relay.Constant][38] /* ty=Tensor[(64, 28, 3, 3), float32] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_3:0:0 */;
    %83 = nn.bias_add(%82, meta[relay.Constant][39] /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::_convolution_3:0:0 */;
    %84 = add(%83, %FunctionVar_2_1) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::add_2:0:0 */;
    %85 = divide(%84, 2f /* ty=float32 span=aten::div_2:0:0 */) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::div_2:0:0 */;
    %86 = add(%85, %FunctionVar_2_2) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::add_3:0:0 */;
    %87 = nn.batch_norm(%86, meta[relay.Constant][40] /* ty=Tensor[(64), float32] */, meta[relay.Constant][41] /* ty=Tensor[(64), float32] */, meta[relay.Constant][42] /* ty=Tensor[(64), float32] */, meta[relay.Constant][43] /* ty=Tensor[(64), float32] */) /* ty=(Tensor[(1, 64, 28, 28), float32], Tensor[(64), float32], Tensor[(64), float32]) span=aten::batch_norm_1:0:0 */;
    %88 = %87.0 /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::batch_norm_1:0:0 */;
    %89 = nn.relu(%88) /* ty=Tensor[(1, 64, 28, 28), float32] span=aten::relu_1:0:0 */;
    qnn.imcflow_min_max_quantize(%89, 0f /* ty=float32 span=imcflow::min_max_quant_1:0:0 */, 1f /* ty=float32 span=imcflow::min_max_quant_1:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 64, 28, 28), float32] span=imcflow::min_max_quant_1:0:0 */
  } /* ty=fn (Tensor[(1, 28, 28, 28), float32], Tensor[(1, 64, 28, 28), float32], Tensor[(1, 64, 28, 28), float32]) -> Tensor[(1, 64, 28, 28), float32] */;
  %98 = %81(%78, %79, %80) /* ty=Tensor[(1, 64, 28, 28), float32] */;
  %99 = %97(%78, %95, %96) /* ty=Tensor[(1, 64, 28, 28), float32] */;
  %100 = (%98, %99) /* ty=(Tensor[(1, 64, 28, 28), float32], Tensor[(1, 64, 28, 28), float32]) */;
  concatenate(%100, axis=1) /* ty=Tensor[(1, 128, 28, 28), float32] */
}

